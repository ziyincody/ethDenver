{"version":3,"file":"index.js","sources":["../src/client.ts","../src/utils.ts"],"sourcesContent":["import type { Chain, Client, Connector } from '@wagmi/core'\nimport {\n  connect,\n  disconnect,\n  fetchBalance,\n  fetchEnsAvatar,\n  fetchEnsName,\n  getAccount,\n  getNetwork,\n  switchNetwork,\n  watchAccount,\n  watchNetwork\n} from '@wagmi/core'\nimport type { ConnectorId } from './types'\n\ntype WalletConnectVersion = 1 | 2\n\nexport class EthereumClient {\n  private readonly wagmi = {} as Client\n  public walletConnectUri = ''\n  public walletConnectVersion: WalletConnectVersion = 1\n  public readonly chains = [] as Chain[]\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public constructor(wagmi: any, chains: Chain[]) {\n    const walletConnect = wagmi.connectors.find((c: Connector) => c.id === 'walletConnect')\n    if (!walletConnect) {\n      throw new Error('WalletConnectConnector is required')\n    }\n    this.wagmi = wagmi\n    this.chains = chains\n    this.walletConnectVersion = Number(walletConnect.options.version ?? '1') as WalletConnectVersion\n  }\n\n  // -- private ------------------------------------------- //\n  private getDefaultConnectorChainId(connector: Connector) {\n    return connector.chains[0].id\n  }\n\n  private async connectWalletConnectV1(connector: Connector, onUri: (uri: string) => void) {\n    return new Promise<void>((resolve, reject) => {\n      connector.once('message', async ({ type }) => {\n        if (type === 'connecting') {\n          const providerConnector = (await connector.getProvider()).connector\n          this.walletConnectUri = providerConnector.uri\n          onUri(providerConnector.uri)\n          providerConnector.on('disconnect', () => {\n            reject(Error())\n          })\n          providerConnector.on('connect', () => {\n            resolve()\n          })\n        }\n      })\n    })\n  }\n\n  private async connectWalletConnectV2(connector: Connector, onUri: (uri: string) => void) {\n    const provider = await connector.getProvider()\n    let activeWalletConnectUri = ''\n\n    return new Promise<void>(resolve => {\n      provider.once('display_uri', (uri: string) => {\n        this.walletConnectUri = uri\n        activeWalletConnectUri = uri\n        onUri(uri)\n      })\n      provider.once('connect', () => {\n        if (activeWalletConnectUri === this.walletConnectUri) {\n          resolve()\n        }\n      })\n    })\n  }\n\n  // -- public web3modal ---------------------------------- //\n  public namespace = 'eip155'\n\n  public getDefaultChain() {\n    const mainnet = this.chains.find(chain => chain.id === 1)\n\n    return mainnet ?? this.chains[0]\n  }\n\n  public getConnectorById(id: ConnectorId | string) {\n    const connector = this.wagmi.connectors.find(item => item.id === id)\n    if (!connector) {\n      throw new Error(`Connector for id ${id} was not found`)\n    }\n\n    return connector\n  }\n\n  public getConnectors() {\n    const connectors = this.wagmi.connectors.filter(connector => connector.id !== 'walletConnect')\n\n    return connectors\n  }\n\n  public async connectWalletConnect(onUri: (uri: string) => void, selectedChainId?: number) {\n    const connector = this.getConnectorById('walletConnect')\n    const isV1 = this.walletConnectVersion === 1\n    const chainId = selectedChainId ?? this.getDefaultConnectorChainId(connector)\n    const handleProviderEvents = isV1\n      ? this.connectWalletConnectV1.bind(this)\n      : this.connectWalletConnectV2.bind(this)\n    const [data] = await Promise.all([\n      connect({ connector, chainId }),\n      handleProviderEvents(connector, onUri)\n    ])\n\n    return data\n  }\n\n  public async connectConnector(connectorId: ConnectorId | string, selectedChainId?: number) {\n    const connector = this.getConnectorById(connectorId)\n    const chainId = selectedChainId ?? this.getDefaultConnectorChainId(connector)\n    const data = await connect({ connector, chainId })\n\n    return data\n  }\n\n  public disconnect = disconnect\n\n  public getAccount = getAccount\n\n  public watchAccount = watchAccount\n\n  public fetchBalance = fetchBalance\n\n  public getNetwork = getNetwork\n\n  public watchNetwork = watchNetwork\n\n  public switchNetwork = switchNetwork\n\n  // -- public web3modal (optional) ----------------------- //\n  public fetchEnsName = fetchEnsName\n\n  public fetchEnsAvatar = fetchEnsAvatar\n}\n","import type { Chain } from '@wagmi/core'\nimport { InjectedConnector } from '@wagmi/core'\nimport { CoinbaseWalletConnector } from '@wagmi/core/connectors/coinbaseWallet'\nimport { WalletConnectConnector } from '@wagmi/core/connectors/walletConnect'\nimport { jsonRpcProvider } from '@wagmi/core/providers/jsonRpc'\nimport type { ModalConnectorsOpts, WalletConnectProviderOpts } from './types'\n\n// -- constants ------------------------------------------------------- //\nexport const NAMESPACE = 'eip155'\n\n// -- providers ------------------------------------------------------- //\nexport function walletConnectProvider<C extends Chain>({ projectId }: WalletConnectProviderOpts) {\n  return jsonRpcProvider<C>({\n    rpc: chain => {\n      const supportedChains = [\n        1, 3, 4, 5, 10, 42, 56, 69, 97, 100, 137, 420, 42161, 42220, 43114, 80001, 421611, 421613,\n        1313161554, 11297108109\n      ]\n\n      if (supportedChains.includes(chain.id)) {\n        return {\n          http: `https://rpc.walletconnect.com/v1/?chainId=${NAMESPACE}:${chain.id}&projectId=${projectId}`\n        }\n      }\n\n      return {\n        http: chain.rpcUrls.default.http[0],\n        webSocket: chain.rpcUrls.default.webSocket?.[0]\n      }\n    }\n  })\n}\n\n// -- connectors ------------------------------------------------------ //\nexport function modalConnectors({ appName, chains, version, projectId }: ModalConnectorsOpts) {\n  const walletConnectVersion = version ?? '1'\n  if (walletConnectVersion === '2' && !projectId) {\n    throw new Error('modalConnectors() requires projectId for WalletConnect version 2')\n  }\n\n  return [\n    new WalletConnectConnector({\n      chains,\n      // @ts-expect-error - projectId is checked above\n      options: { qrcode: false, version: walletConnectVersion, projectId }\n    }),\n    new InjectedConnector({\n      chains,\n      options: { shimDisconnect: true, shimChainChangedDisconnect: true }\n    }),\n    new CoinbaseWalletConnector({ chains, options: { appName } })\n  ]\n}\n"],"names":["EthereumClient","wagmi","chains","disconnect","getAccount","watchAccount","fetchBalance","getNetwork","watchNetwork","switchNetwork","fetchEnsName","fetchEnsAvatar","_a","walletConnect","c","connector","onUri","resolve","reject","type","providerConnector","provider","activeWalletConnectUri","uri","mainnet","chain","id","item","selectedChainId","isV1","chainId","handleProviderEvents","data","connect","connectorId","NAMESPACE","walletConnectProvider","projectId","jsonRpcProvider","modalConnectors","appName","version","walletConnectVersion","WalletConnectConnector","InjectedConnector","CoinbaseWalletConnector"],"mappings":"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"}